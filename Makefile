# Variables contain directory/file and so on
BIN ?= $(PWD)/bin
OUTPUT ?= $(PWD)/output

COMMIT := $(shell git describe --dirty --always)

OS ?= $(shell uname | tr "[:upper:]" "[:lower:]")
ARCH ?= $(shell go env GOARCH)
GO := CGO_ENABLED=0 GOOS=$(OS) GOARCH=$(ARCH) go
DOCKER := DOCKER_BUILDKIT=1 docker
IMAGE ?= hub.pingcap.net/ee/tirelease
IMAGE_TAG ?= $(COMMIT)

LDFLAGS += -X "main.version=$(COMMIT)"
LDFLAGS += -X "main.buildTime=$(shell date -u '+%Y-%m-%dT%H:%M:%S')"

WEBSITE_DIR = ./website/

# =============================================================================
# The following are common build commands
# =============================================================================
bin:
	@mkdir -p $(BIN)/$(OS)/$(ARCH)

tirelease: bin
	$(GO) build -o $(BIN)/$(OS)/$(ARCH)/tirelease -ldflags '$(LDFLAGS)' cmd/tirelease/main.go


build: tirelease

# `ARCH=amd64 make build-image`
build-image: build
	$(DOCKER) build --build-arg arch=$(ARCH) --platform linux/$(ARCH) -t $(IMAGE):$(IMAGE_TAG)-$(ARCH) .

image-arm64:
	OS=linux ARCH=arm64 make -j2 build-image

image-amd64:
	OS=linux ARCH=amd64 make -j2 build-image

# Multi-arch image, support amd64 and arm64
image: build-ui image-amd64 image-arm64

image-push-amd64: image-amd64
	$(DOCKER) push $(IMAGE):$(IMAGE_TAG)-amd64

image-push-arm64: image-arm64
	$(DOCKER) push $(IMAGE):$(IMAGE_TAG)-arm64

image-push: image-push-arm64 image-push-amd64
	$(DOCKER) manifest create $(IMAGE):$(IMAGE_TAG) \
		--amend $(IMAGE):$(IMAGE_TAG)-amd64 \
		--amend $(IMAGE):$(IMAGE_TAG)-arm64
	$(DOCKER) manifest push --purge $(IMAGE):$(IMAGE_TAG)

upgrade-service: image-push
	kubectl -n tirelease set image deployment/tirelease main=$(IMAGE):$(IMAGE_TAG) --record

build-ui:
	cd ${WEBSITE_DIR} && \
	yarn && \
	yarn build

run: build build-ui
	$(BIN)/$(OS)/$(ARCH)/tirelease

fmt: install-goimports
	goimports -l -w -local "github.com/pingcap-qe/tirelease" .

lint: install-linter
	golangci-lint run --skip-dirs='(bin|website)'

install-goimports:
ifeq (, $(shell which goimports))
	@{ \
	set -e ;\
	TMP_DIR=$$(mktemp -d) ;\
	cd $$TMP_DIR ;\
	GO111MODULE=on go install golang.org/x/tools/cmd/goimports@latest ;\
	rm -rf $$TMP_DIR ;\
	}
endif

install-linter:
ifeq (, $(shell which golangci-lint))
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
endif

clean:
	@rm -rfv $(BIN) $(OUTPUT)
	@rm -rf ${WEBSITE_DIR}/build/
	@echo "clear all temporary files and folders successful hahaha!"

# =============================================================================
# Help documentation for commands
# =============================================================================
help:
	@echo "make build : build all binaries"
	@echo "make run : build all binaries and run"
	@echo "make clean : clear all temporary files and folders generated by the 'make build' or 'make run'"


.PHONY: build run clean help
.PHONY: build.web build.server docker docker.run k8s k8s.clean

